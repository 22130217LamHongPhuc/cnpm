package com.example.movie.ui.sigin

import android.content.Intent
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.IntentSenderRequest
import androidx.lifecycle.ViewModel
import com.example.movie.ui.detail.UiState
import com.example.movie.ui.repository.EmailAuthRepo
import com.example.movie.ui.repository.FacebookAuthHelper
import com.facebook.CallbackManager
import com.facebook.FacebookCallback
import com.facebook.FacebookException
import com.facebook.login.LoginResult
import com.google.android.gms.common.api.ApiException
import com.google.firebase.auth.FacebookAuthProvider
import com.google.firebase.auth.FirebaseAuth
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import javax.inject.Inject
import kotlin.coroutines.resume
import kotlin.coroutines.suspendCoroutine

@HiltViewModel
class SiginViewmodel @Inject constructor(val auth:EmailAuthRepo) : ViewModel(){
    private var _stateSignin = MutableStateFlow<UiState<String>>(UiState.Default)

    var stateSignin = _stateSignin.asStateFlow()
    val callbackManager = CallbackManager.Factory.create()
    val loginManager = com.facebook.login.LoginManager.getInstance()

    fun openDialogLogin(activity: ComponentActivity, launcher: ActivityResultLauncher<IntentSenderRequest>){
         auth.signIn(activity,launcher)
    }



    suspend fun handleSignInResult(data: Intent?) {
        try {
            _stateSignin.value = UiState.Loading

            val result = auth.handleSignInResult(data)

            result.onSuccess {
                _stateSignin.value = UiState.Success(it)
            }
            result.onFailure {
                _stateSignin.value = UiState.Error(it.message ?: "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i")
            }

        } catch (e: Exception) {
            _stateSignin.value = UiState.Error(e.message ?: "L·ªói kh√¥ng x√°c ƒë·ªãnh")
        }
    }

    suspend fun siginWithEmail(email: String, pass: String) {

        try {
            _stateSignin.value = UiState.Loading
            Log.d("SignIn", "‚è≥ ƒêang g·ªçi handleSignInResult...")

            val result = auth.signInWithEmail(email,pass)

            Log.d("SignIn", "‚úÖ K·∫øt qu·∫£ nh·∫≠n ƒë∆∞·ª£c: $result")

            result.onSuccess {
                Log.d("SignIn", "üéâ ƒêƒÉng nh·∫≠p th√†nh c√¥ng: $it")
                _stateSignin.value = UiState.Success(it)
            }
            result.onFailure {
                Log.e("SignIn", "‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i: ${it.message}")
                _stateSignin.value = UiState.Error(it.message ?: "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i")
            }

        } catch (e: Exception) {
            Log.e("SignIn", "‚ö†Ô∏è L·ªói ngo·∫°i l·ªá: ${e.message}")
            _stateSignin.value = UiState.Error(e.message ?: "L·ªói kh√¥ng x√°c ƒë·ªãnh")
        }
    }

    fun creaditFacebookForFirebase(result: LoginResult,activity: ComponentActivity) {
         try {
            val idToken = result.accessToken.token

            if (idToken != null) {
                val credential = FacebookAuthProvider.getCredential(idToken)
                    FirebaseAuth.getInstance().signInWithCredential(credential)
                        .addOnCompleteListener { task ->
                            if (task.isSuccessful) {
                                Log.d("SignIn", "Firebase sign-in successful")
                                _stateSignin.value = UiState.Success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng")

                            } else {
                                Log.e("SignIn", "Firebase sign-in failed", task.exception)
                                _stateSignin.value = UiState.Error(task.exception?.message ?: "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i")

                            }
                        }

            } else {
                Log.e("SignIn", "No ID Token!")
            }
        } catch (e: ApiException) {
             _stateSignin.value = UiState.Error(e.message ?: "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i")
         }
    }

    fun setErrorLogin(error: String) {
        _stateSignin.value =UiState.Error(error)
    }


}

